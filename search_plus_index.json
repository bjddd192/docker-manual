{"./":{"url":"./","title":"我的 docker 学习手册","keywords":"","body":"简介 docker run -it --rm hub.wonhigh.cn/basic/alpine-java:8_jdk date docker run -it --rm hub.wonhigh.cn/basic/alpine-java:7_jdk date docker run -it --rm anapsix/alpine-java:7_jdk bash # 在容器内取容器ID cat /proc/self/cgroup | grep pids | awk -F '/' '{print $NF}' | cut -c1-12 # 如何从容器内部获取容器ID cat /proc/self/mountinfo 或 cat /proc/self/mounts 或 cat /proc/self/cgroup https://github.com/bcicen/ctop Docker 官网 what-container 容器如“衣服”，而虚拟机却是“房子” Docker | 第五章：构建自定义镜像 10张图带你深入理解Docker容器和镜像 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-06 09:55:20 "},"install/Centos7.html":{"url":"install/Centos7.html","title":"Centos7 安装 docker","keywords":"","body":"Centos7 安装 docker 在一台干净的机器上安装 docker，使用阿里云的仓库，加快安装的过程。 # step 1: 安装必要的一些系统工具 yum install -y yum-utils device-mapper-persistent-data lvm2 # Step 2: 添加软件源信息 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # Step 3: 更新并安装 Docker-CE yum makecache fast # 安装指定版本的Docker-CE: yum list docker-ce.x86_64 --showduplicates | sort -r yum -y install docker-ce-18.03.0.ce-1.el7.centos docker --version # Step 4: 重定义对docker0网桥，设置镜像加速器和信任仓库 tee /etc/docker/daemon.json > /etc/hosts # Step 7: 测试镜像拉取 docker pull hub.wonhigh.cn/retail/retail-gms-web:1.7.0-SNAPSHOT # 注意： # 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。 # vim /etc/yum.repos.d/docker-ee.repo # 将[docker-ce-test]下方的enabled=0修改为enabled=1 # # 安装指定版本的Docker-CE: # Step 1: 查找Docker-CE的版本: # yum list docker-ce.x86_64 --showduplicates | sort -r # Loading mirror speeds from cached hostfile # Loaded plugins: branch, fastestmirror, langpacks # docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable # docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable # docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable # Available Packages # Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos) # sudo yum -y install docker-ce-[VERSION] Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-11-21 11:44:48 "},"hub_docker/system_tools/GateOne.html":{"url":"hub_docker/system_tools/GateOne.html","title":"GateOne","keywords":"","body":"GateOne 简介 GateOne 是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器，非常高大尚，它有以下特点： 基于现代的 HTML5 技术，无需任何浏览器插件。 支持多个 SSH 进程。 可以嵌入到其他任意应用程序中。 支持使用 JavaScript，Python 甚至纯 CSS 编写的插件。 支持 SSH 进程副本，打开多个进程而无需重复输入密码。 支持各种服务器端的日志功能，支持 Keberos-based 单点登录甚至活动目录。 支持操作日志记录，具有操作记录回放功能。 综上所述，GateOne 可以作为一种堡垒机的开源解决方案。 官方镜像 liftoff/gateone 启动命令 docker run -d --name gateone -h gateone -p 12222:8000 --restart=always \\ -e TZ=Asia/Shanghai \\ liftoff/gateone gateone 服务使用 访问：https://172.20.32.36:12222/ 即可。 快捷访问：https://172.20.32.36:12222/?ssh=ssh://root@172.20.32.47 即可。 参考资料 开源web终端ssh解决方案-gateone简介 一款非常好用的Web端SSH工具：GateOne安装教程 GateOne —— 高效的WebSSH工具 扩展阅读 GateOne配置API认证、SSH自动登录、用户免密登录及Web应用嵌入 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 12:17:22 "},"hub_docker/system_tools/WebSSH2.html":{"url":"hub_docker/system_tools/WebSSH2.html","title":"WebSSH2","keywords":"","body":"WebSSH2 简介 与 GateOne 类似，也是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器。 特点是更轻量，可以方便地抓取服务器操作产生的日志。 更多内容请参考： webssh2官网 官方镜像 psharkey/webssh2 启动命令 docker run -d --name webssh2 -p 2222:2222 --restart=always \\ psharkey/webssh2 服务使用 访问：http://172.20.32.36:2222/ssh/host/172.20.32.47 即可。 参考资料 一个可以在浏览器上运行的SSH客户端：WebSSH2安装教程 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 13:28:03 "},"hub_docker/ops_tools/rundeck.html":{"url":"hub_docker/ops_tools/rundeck.html","title":"rundeck","keywords":"","body":"rundeck 官方镜像 Hub官方 启动命令 mkdir -p /data/docker_volumn/rundeck/server/config docker stop rundeck && docker rm rundeck docker run -d --name rundeck \\ rundeck/rundeck:3.0.11 docker cp rundeck:/home/rundeck/server/config/realm.properties /data/docker_volumn/rundeck/server/config/ docker stop rundeck && docker rm rundeck docker run -d --name rundeck -p 4440:4440 --restart always \\ -e RUNDECK_DATABASE_DRIVER=com.mysql.jdbc.Driver \\ -e RUNDECK_GRAILS_URL=http://10.0.43.24:4440 \\ -e RUNDECK_DATABASE_URL=jdbc:mysql://10.0.30.39:3306/db_rundeck?autoReconnect=true \\ -e RUNDECK_DATABASE_USERNAME=usr_rundeck \\ -e RUNDECK_DATABASE_PASSWORD=scm_rundeck \\ -v /data/docker_volumn/rundeck/server/data:/home/rundeck/server/data \\ -v /root/.ssh/:/home/rundeck/.ssh \\ -v /data/docker_volumn/rundeck/server/config/realm.properties:/home/rundeck/server/config/realm.properties \\ rundeck/rundeck:3.0.11 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-03 23:34:25 "},"hub_docker/source_code_tools/Gitlab.html":{"url":"hub_docker/source_code_tools/Gitlab.html","title":"Gitlab","keywords":"","body":"Gitlab 官方镜像 Hub官方 启动命令 mkdir -p /data/gitlab/etc mkdir -p /data/gitlab/log mkdir -p /data/gitlab/data docker run \\ --detach \\ --publish 8443:443 \\ --publish 8080:80 \\ --name gitlab \\ --restart unless-stopped \\ --volume /data/gitlab/etc:/etc/gitlab \\ --volume /data/gitlab/log:/var/log/gitlab \\ --volume /data/gitlab/data:/var/opt/gitlab \\ beginor/gitlab-ce:11.3.0-ce.0 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-27 13:54:52 "},"hub_docker/monitor_tools/Pinpoint.html":{"url":"hub_docker/monitor_tools/Pinpoint.html","title":"Pinpoint","keywords":"","body":"Pinpoint Pinpoint 是世界领先的开源应用监控解决方案 - 受到全球数百万用户的信赖。它支持并帮助您一目了然地了解您的应用程序，并允许您构建世界一流的高质量软件。 Pinpoint 是开源在 github 上的一款 APM 监控工具，它是用 Java 编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约 3％ 资源利用率），安装 agent 是无侵入式的，只需要在被测试的 Tomcat 中加上 3 句话，打下探针，就可以监控整套程序了。 官网 Hub官方 容器化安装 git clone https://github.com/naver/pinpoint-docker.git cd pinpoint-docker # 检查调整 docker-compose.yaml 文件的网络模式等 docker-compose pull && docker-compose up -d docker run -it --rm -e AGENT_DEBUG_LEVEL=DEBUG -e COLLECTOR_IP=10.0.43.25 hub.wonhigh.cn/basic/alpine-java:8_jdk_pinpoint_agent bash 仓库比较大，镜像比较多，需要耐心等待。 测试地址： http://10.0.43.25:8079 http://10.0.43.25:8081 参考资料 docker部署pinpoint，监控docker中的Springboot项目 Pinpoint 安装部署 分布式跟踪工具Pinpoint技术入门 Pinpoint 分布式请求跟踪系统的搭建 Dapper，大规模分布式系统的跟踪系统 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-11-22 15:09:06 "},"hub_docker/database/mysql.html":{"url":"hub_docker/database/mysql.html","title":"mysql","keywords":"","body":"mysql 官方镜像 Hub官方 启动命令 docker run --name mysql -d -p 3309:3306 \\ -e 'MYSQL_ROOT_PASSWORD=blf1#root' \\ -v /home/docker/mysql/data:/var/lib/mysql/ \\ mysql:5.7.24 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 23:31:56 "},"command/container.html":{"url":"command/container.html","title":"容器管理","keywords":"","body":"容器管理 常用命令 # 查看容器 IP 地址 docker inspect --format '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 容器ID/NAME # 查看 volume docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect VOLUME_NAME Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-06 23:47:02 "},"command/image.html":{"url":"command/image.html","title":"镜像管理","keywords":"","body":"镜像管理 常用命令 # 查找所有包含 registry.eyd.com:5000 关键字的镜像 docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 删除所有包含 registry.eyd.com:5000 关键字的镜像 docker rmi $(docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}') docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 列举悬空镜像（TAG=none） docker images -f dangling=true # 删除全部悬空镜像 docker image prune # 删除所有未被使用的镜像 docker image prune -a Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-11-05 14:36:54 "},"compose/file_reference.html":{"url":"compose/file_reference.html","title":"编排文件参考","keywords":"","body":"编排文件参考 官方参考 volumes docker-compose里两种设置方式都是可以持久化的： 绝对路径的 ghost: image: ghost volumes: - ./ghost/config.js:/var/lib/ghost/config.js 卷标的 services: mysql: image: mysql container_name: mysql volumes: - mysql:/var/lib/mysql ... volumes: mysql: 第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道数据存在本地什么位置，下面说明如何查看docker的卷标： # 查看所有卷标 docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect redissentinel_redis_node1_data Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-06 23:56:26 "},"tip.html":{"url":"tip.html","title":"小技巧","keywords":"","body":"小技巧 在一个已经 \"exit” 的docker容器中修改配置文件 此法验证失败，待进一步寻求方法。 有时候可能需要修改运行在docker容器中的nginx的配置文件，或者其他一些已经运行和启动很久的容器中的配置文件。但是在这个过程可能稍有不慎，配置文件中，比如少了个分号，直接导致容器运行不起来，每次启动到一半就报错退出，使容器不可用。有没有一种办法可以在一个已经 \"exit”的docker容器中修改配置文件呢？答案还是有的。 运行命令 docker inspect [CONTAINER ID] 复制 MergedDir 中的路径，切换到对应的目录下 可以惊奇地发现前者的目录文件和直接进入容器中的可以看到的目录文件是一样的，这样我们就可以在前者中，也就是在容器已经 \"exit\" 的情况下，修改容器中的配置文件，比如 nginx 的话，就进入到 etc/nginx/ 下边去修改那个“忘记添加分号的” nginx.conf。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-08 09:20:14 "}}