{"./":{"url":"./","title":"我的 docker 学习手册","keywords":"","body":"简介 docker run -it --rm hub.wonhigh.cn/basic/alpine-java:8_jdk date docker run -it --rm hub.wonhigh.cn/basic/alpine-java:7_jdk date docker run -it --rm anapsix/alpine-java:7_jdk bash # 在容器内取容器ID cat /proc/self/cgroup | grep pids | awk -F '/' '{print $NF}' | cut -c1-12 # 如何从容器内部获取容器ID cat /proc/self/mountinfo 或 cat /proc/self/mounts 或 cat /proc/self/cgroup https://github.com/bcicen/ctop Docker 官网 what-container 容器如“衣服”，而虚拟机却是“房子” Docker | 第五章：构建自定义镜像 10张图带你深入理解Docker容器和镜像 镜像加速技巧： quay.io 的可以用 ustc 的 quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0 docker stack Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-22 23:47:13 "},"install/Centos7.html":{"url":"install/Centos7.html","title":"Centos7 安装 docker","keywords":"","body":"Centos7 安装 docker 在一台干净的机器上安装 docker，使用阿里云的仓库，加快安装的过程。 # step 1: 安装必要的一些系统工具 yum install -y yum-utils device-mapper-persistent-data lvm2 # Step 2: 添加软件源信息 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # Step 3: 更新并安装 Docker-CE yum makecache fast # 安装指定版本的Docker-CE: yum list docker-ce.x86_64 --showduplicates | sort -r yum -y install docker-ce-18.03.0.ce-1.el7.centos docker --version # Step 4: 重定义对docker0网桥，设置镜像加速器和信任仓库 mkdir -p /etc/docker tee /etc/docker/daemon.json > /etc/hosts # Step 7: 测试镜像拉取 docker pull hub.wonhigh.cn/retail/retail-gms-web:1.7.0-SNAPSHOT # 注意： # 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。 # vim /etc/yum.repos.d/docker-ee.repo # 将[docker-ce-test]下方的enabled=0修改为enabled=1 # # 安装指定版本的Docker-CE: # Step 1: 查找Docker-CE的版本: # yum list docker-ce.x86_64 --showduplicates | sort -r # Loading mirror speeds from cached hostfile # Loaded plugins: branch, fastestmirror, langpacks # docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable # docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable # docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable # Available Packages # Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos) # sudo yum -y install docker-ce-[VERSION] 安装 docker-compose # 安装 docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose # 安装 docker-compose Command-line completion yum -y install bash-completion curl -L https://raw.githubusercontent.com/docker/compose/1.23.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-07 10:41:34 "},"hub_docker/system_tools/GateOne.html":{"url":"hub_docker/system_tools/GateOne.html","title":"GateOne","keywords":"","body":"GateOne 简介 GateOne 是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器，非常高大尚，它有以下特点： 基于现代的 HTML5 技术，无需任何浏览器插件。 支持多个 SSH 进程。 可以嵌入到其他任意应用程序中。 支持使用 JavaScript，Python 甚至纯 CSS 编写的插件。 支持 SSH 进程副本，打开多个进程而无需重复输入密码。 支持各种服务器端的日志功能，支持 Keberos-based 单点登录甚至活动目录。 支持操作日志记录，具有操作记录回放功能。 综上所述，GateOne 可以作为一种堡垒机的开源解决方案。 官方镜像 liftoff/gateone 启动命令 docker run -d --name gateone -h gateone -p 12222:8000 --restart=always \\ -e TZ=Asia/Shanghai \\ liftoff/gateone gateone 服务使用 访问：https://172.20.32.36:12222/ 即可。 快捷访问：https://172.20.32.36:12222/?ssh=ssh://root@172.20.32.47 即可。 参考资料 开源web终端ssh解决方案-gateone简介 一款非常好用的Web端SSH工具：GateOne安装教程 GateOne —— 高效的WebSSH工具 扩展阅读 GateOne配置API认证、SSH自动登录、用户免密登录及Web应用嵌入 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 12:17:22 "},"hub_docker/system_tools/WebSSH2.html":{"url":"hub_docker/system_tools/WebSSH2.html","title":"WebSSH2","keywords":"","body":"WebSSH2 简介 与 GateOne 类似，也是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器。 特点是更轻量，可以方便地抓取服务器操作产生的日志。 更多内容请参考： webssh2官网 官方镜像 psharkey/webssh2 启动命令 docker run -d --name webssh2 -p 2222:2222 --restart=always \\ psharkey/webssh2 服务使用 访问：http://172.20.32.36:2222/ssh/host/172.20.32.47 即可。 参考资料 一个可以在浏览器上运行的SSH客户端：WebSSH2安装教程 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 13:28:03 "},"hub_docker/system_tools/shadowsocks.html":{"url":"hub_docker/system_tools/shadowsocks.html","title":"shadowsocks","keywords":"","body":"shadowsocks shadowsocks-privoxy shadowsocks client for socks5 proxy privoxy for http proxy 我的镜像 bjddd192/shadowsocks-privoxy 启动命令 docker stop shadowsocks-privoxy && docker rm shadowsocks-privoxy docker run -d --name shadowsocks-privoxy -p 8118:8118 --restart=always \\ -e SERVER_ADDR=x.x.x.x \\ -e SERVER_PORT=8087 \\ -e PASSWORD=dockerMan \\ bjddd192/shadowsocks-privoxy:2.9.1 验证代理 export all_proxy=http://127.0.0.1:8118 export ftp_proxy=http://127.0.0.1:8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost,172.17.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16 curl -I www.google.com # 翻墙下载测试 wget -P /tmp --no-check-certificate https://s3.amazonaws.com/railsinstaller/Windows/railsinstaller-3.3.0.exe 取消使用代理 while read var; do unset $var; done 参考资料 bluebu/shadowsocks-privoxy shadowsocks-libev Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-07 18:24:32 "},"hub_docker/system_tools/dnsmasq.html":{"url":"hub_docker/system_tools/dnsmasq.html","title":"dnsmasq","keywords":"","body":"dnsmasq 简介 GateOne 是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器，非常高大尚，它有以下特点： 基于现代的 HTML5 技术，无需任何浏览器插件。 支持多个 SSH 进程。 可以嵌入到其他任意应用程序中。 支持使用 JavaScript，Python 甚至纯 CSS 编写的插件。 支持 SSH 进程副本，打开多个进程而无需重复输入密码。 支持各种服务器端的日志功能，支持 Keberos-based 单点登录甚至活动目录。 支持操作日志记录，具有操作记录回放功能。 综上所述，GateOne 可以作为一种堡垒机的开源解决方案。 官方镜像 andyshinn/dnsmasq 我的镜像 启动命令 mkdir -p /data/docker_volumn/dnsmasq tee > /data/docker_volumn/dnsmasq/resolv.dnsmasq /data/docker_volumn/dnsmasq/dnsmasqhosts /data/docker_volumn/dnsmasq/dnsmasq.conf 防火墙设置 如服务器启用了防火墙，需要增加规则： firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 -p tcp --dport 53 -j ACCEPT firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 -p udp --dport 53 -j ACCEPT firewall-cmd --reload 客户端使用 linux 找到 /etc/sysconfig/network-scripts/ 下的物理网卡文件增加或修改 DNS 配置，然后重启网络服务，如下： vi /etc/sysconfig/network-scripts/ifcfg-eth0 NAME=\"eth0\" HWADDR=\"00:50:56:87:58:06\" ONBOOT=yes NETBOOT=yes UUID=\"44721538-1fbe-4d73-98dc-bd6dafff03c6\" IPV6INIT=yes BOOTPROTO=static TYPE=Ethernet IPADDR=10.234.6.83 NETMASK=255.255.255.0 GATEWAY=10.234.6.1 DNS1=10.0.43.27 # 重启网络服务 systemctl restart network windows 直接到网络中添加此 dns 服务，注意应该放置到最前面。 参考资料 Docker下搭建DNS服务器dnsmasq Dnsmasq安装与配置 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-20 15:57:32 "},"hub_docker/ops_tools/rundeck.html":{"url":"hub_docker/ops_tools/rundeck.html","title":"rundeck","keywords":"","body":"rundeck 官方镜像 Hub官方 启动命令 mkdir -p /data/docker_volumn/rundeck/server/config docker stop rundeck && docker rm rundeck docker run -d --name rundeck \\ rundeck/rundeck:3.0.11 docker cp rundeck:/home/rundeck/server/config/realm.properties /data/docker_volumn/rundeck/server/config/ docker stop rundeck && docker rm rundeck docker run -d --name rundeck -p 4440:4440 --restart always \\ -e RUNDECK_DATABASE_DRIVER=com.mysql.jdbc.Driver \\ -e RUNDECK_GRAILS_URL=http://10.0.43.24:4440 \\ -e RUNDECK_DATABASE_URL=jdbc:mysql://10.0.30.39:3306/db_rundeck?autoReconnect=true \\ -e RUNDECK_DATABASE_USERNAME=usr_rundeck \\ -e RUNDECK_DATABASE_PASSWORD=scm_rundeck \\ -v /data/docker_volumn/rundeck/server/data:/home/rundeck/server/data \\ -v /root/.ssh/:/home/rundeck/.ssh \\ -v /data/docker_volumn/rundeck/server/config/realm.properties:/home/rundeck/server/config/realm.properties \\ rundeck/rundeck:3.0.11 参考资料 rundeck用户权限管理 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-26 15:37:01 "},"hub_docker/source_code_tools/Gitlab.html":{"url":"hub_docker/source_code_tools/Gitlab.html","title":"Gitlab","keywords":"","body":"Gitlab 官方镜像 Hub官方 启动命令 mkdir -p /data/gitlab/etc mkdir -p /data/gitlab/log mkdir -p /data/gitlab/data docker run \\ --detach \\ --publish 8443:443 \\ --publish 8080:80 \\ --name gitlab \\ --restart unless-stopped \\ --volume /data/gitlab/etc:/etc/gitlab \\ --volume /data/gitlab/log:/var/log/gitlab \\ --volume /data/gitlab/data:/var/opt/gitlab \\ beginor/gitlab-ce:11.3.0-ce.0 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-27 13:54:52 "},"hub_docker/monitor_tools/Pinpoint.html":{"url":"hub_docker/monitor_tools/Pinpoint.html","title":"Pinpoint","keywords":"","body":"Pinpoint Pinpoint 是世界领先的开源应用监控解决方案 - 受到全球数百万用户的信赖。它支持并帮助您一目了然地了解您的应用程序，并允许您构建世界一流的高质量软件。 Pinpoint 是开源在 github 上的一款 APM 监控工具，它是用 Java 编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约 3％ 资源利用率），安装 agent 是无侵入式的，只需要在被测试的 Tomcat 中加上 3 句话，打下探针，就可以监控整套程序了。 官网 Hub官方 容器化安装 git clone https://github.com/naver/pinpoint-docker.git cd pinpoint-docker # 检查调整 docker-compose.yaml 文件的网络模式等 docker-compose pull && docker-compose up -d docker run -it --rm -e AGENT_DEBUG_LEVEL=DEBUG -e COLLECTOR_IP=10.0.43.25 hub.wonhigh.cn/basic/alpine-java:8_jdk_pinpoint_agent bash 仓库比较大，镜像比较多，需要耐心等待。 测试地址： http://10.0.43.25:8079 http://10.0.43.25:8081 参考资料 docker部署pinpoint，监控docker中的Springboot项目 Pinpoint 安装部署 分布式跟踪工具Pinpoint技术入门 Pinpoint 分布式请求跟踪系统的搭建 Dapper，大规模分布式系统的跟踪系统 Pinpoint 安装部署 项目系统监控 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-15 16:49:17 "},"hub_docker/developer_tools/php.html":{"url":"hub_docker/developer_tools/php.html","title":"php","keywords":"","body":"php 官方镜像 Hub官方 测试文件 hello.php PHP 测试 Hello World'; ?> 启动命令 docker stop php-app && docker rm php-app docker run --name php-app -d -p 30028:80 --restart=always \\ -v /home/docker/php:/var/www/html \\ php:7.2-apache 验证 访问 url 如：http://203.195.243.110:30028/hello.php Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-26 23:40:37 "},"hub_docker/developer_tools/jenkins.html":{"url":"hub_docker/developer_tools/jenkins.html","title":"jenkins","keywords":"","body":"jenkins 官方镜像 Hub官方 Hub官方(旧版) 我的镜像 我的镜像 maven settings 文件 /data/docker_volumn/jenkins/settings.xml /var/jenkins_home/maven-repository true false false release deployment ${usr.home}/.ssh/id_dsa --> some_passphrase --> 664 --> 775 --> --> snapshot deployment thirdparty deployment nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public * nexus nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public nexus 启动命令 docker stop jenkins && docker rm jenkins docker run --name jenkins -d -p 29999:8080 -p 5000:50000 --restart=always \\ --memory 2G -u root \\ -v /data/docker_volumn/jenkins:/var/jenkins_home \\ -v /usr/bin/docker:/usr/bin/docker \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\ bjddd192/jenkins:2.165 # 拷贝出 /usr/share/jenkins 方便后续 jenkins 升级 docker cp jenkins:/usr/share/jenkins /data/docker_volumn/jenkins_war # 生成 maven 配置文件 tee > /data/docker_volumn/jenkins/settings.xml /var/jenkins_home/maven-repository true false false release deployment snapshot deployment thirdparty deployment docker-hub scm n7izpoc6N2 scm@ex.com nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public * nexus nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public nexus EOF docker stop jenkins && docker rm jenkins docker run --name jenkins -d -p 29999:8080 -p 5000:50000 --restart=always \\ --memory 3G -u root \\ -v /data/docker_volumn/jenkins:/var/jenkins_home \\ -v /data/docker_volumn/jenkins_war:/usr/share/jenkins \\ -v /usr/bin/docker:/usr/bin/docker \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\ -v /data/docker_volumn/jenkins/settings.xml:/usr/local/apache-maven-3.6.0/conf/settings.xml \\ bjddd192/jenkins:2.165 验证 访问 url 如：http://serverIP:29999 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 11:24:43 "},"hub_docker/developer_tools/nexus2.html":{"url":"hub_docker/developer_tools/nexus2.html","title":"nexus2","keywords":"","body":"nexus2 官方镜像 Hub官方 启动命令 mkdir /data/docker_volumn/nexus2/conf mkdir /data/docker_volumn/nexus2/data tee > /data/docker_volumn/nexus2/conf/nexus.properties 验证 访问 url 如：http://serverIP:20020/nexus，初始用户名/密码：admin/admin123 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 16:27:26 "},"hub_docker/database/mysql.html":{"url":"hub_docker/database/mysql.html","title":"MySQL","keywords":"","body":"mysql 官方镜像 Hub官方 启动命令 docker run --name mysql -d -p 3309:3306 \\ -e 'MYSQL_ROOT_PASSWORD=blf1#root' \\ -v /home/docker/mysql/data:/var/lib/mysql/ \\ mysql:5.7.24 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 23:31:56 "},"hub_docker/database/Oracle.html":{"url":"hub_docker/database/Oracle.html","title":"Oracle","keywords":"","body":"Oracle Oracle 11g 官方镜像 Hub官方(已失效) 我的镜像 docker-oracle-xe-11g 启动命令 docker run --name oracle -d -p 49161:1521 --restart=always \\ -e ORACLE_ALLOW_REMOTE=true \\ bjddd192/oracle-xe-11g:18.04 # 数据目录持久化未成功，待后面研究 # /data/docker_volumn/oralce/data:/u01/app/oracle/oradata/XE \\ 数据库连接信息: hostname: localhost port: 49161 sid: xe username: system password: oracle jdbc连接信息: jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.0.43.32)(PORT=49161)))(CONNECT_DATA=(SERVER = DEDICATED)(SERVICE_NAME=xe))) Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 22:59:11 "},"hub_docker/database/MongoDB.html":{"url":"hub_docker/database/MongoDB.html","title":"MongoDB","keywords":"","body":"MongoDB 官方镜像 Hub官方 启动命令 单节点 docker stop mongo && docker rm mongo docker run -d --name mongo -p 30017:27017 --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/data:/data/db \\ mongo:3.4.18 测试数据： docker exec -it mongo mongo admin --port 27017 -u root -p123456 > use test > db.test.insert({msg: \"this message is from master\", ts: new Date()}) > show dbs 一主一从 优缺点：master-slave 结构，当 master 挂了，slave 不会被选举为 master，所以这种结构只起到了备份数据的作用。 docker stop mongo_master && docker rm mongo_master docker run -d --name mongo_master --net=host --restart=always \\ -v /home/docker/mongo/master/data:/data/db \\ mongo:3.4.18 \\ mongod --port 30018 --master docker stop mongo_slaver && docker rm mongo_slaver docker run -d --name mongo_slaver --net=host --restart=always \\ -v /home/docker/mongo/slaver/data:/data/db \\ mongo:3.4.18 \\ mongod --port 30019 --slave --source 10.68.0.7:30018 测试数据： docker exec -it mongo_master mongo --port 30018 > use test > db.test.insert({msg: \"this message is from master\", ts: new Date()}) > db.test.find(); > show dbs > exit docker exec -it mongo_slaver mongo --port 30019 > use test switched to db test > db.test.insert({msg: \"this message is from slaver\", ts: new Date()}) # slaver 只读，无法写入 WriteResult({ \"writeError\" : { \"code\" : 10107, \"errmsg\" : \"not master\" } }) # 副本节点上不允许读，需要设置副本节点可以读。 > db.test.setSlaveOk(); > db.test.find(); # 查看服务状态 > db.printReplicationInfo(); > exit mongoDB 官方已经不建议使用主从模式了，替代方案是采用副本集的模式。 副本集 无认证 mkdir -p /home/docker/mongo/replica_set01 mkdir -p /home/docker/mongo/replica_set02 mkdir -p /home/docker/mongo/replica_set03 docker stop mongo_replica_set01 && docker rm mongo_replica_set01 docker run -d --name mongo_replica_set01 --net=host --restart=always \\ -v /home/docker/mongo/replica_set01/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30020 --replSet mongoreplset docker stop mongo_replica_set02 && docker rm mongo_replica_set02 docker run -d --name mongo_replica_set02 --net=host --restart=always \\ -v /home/docker/mongo/replica_set02/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30021 --replSet mongoreplset docker stop mongo_replica_set03 && docker rm mongo_replica_set03 docker run -d --name mongo_replica_set03 --net=host --restart=always \\ -v /home/docker/mongo/replica_set03/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30022 --replSet mongoreplset 初始化 replica set： docker exec -it mongo_replica_set01 mongo --port 30020 --host 10.68.0.7 > rs.initiate() > rs.add('10.68.0.7:30021') > rs.add('10.68.0.7:30022') > rs.status() > use test > db.test.insert({msg: \"this message is from replica_set01\", ts: new Date()}) > db.test.find(); > exit docker exec -it mongo_replica_set02 mongo --port 30021 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit docker exec -it mongo_replica_set03 mongo --port 30022 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit 设置账号： docker exec -it mongo_replica_set01 mongo --port 30020 --host 10.68.0.7 > use admin > db.createUser({user:\"root\",pwd:\"root\",roles:[{role:\"root\",db:\"admin\"}]}) > db.createUser({user:\"admin\",pwd:\"admin\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]}) > use test > db.createUser({user:\"test\",pwd:\"test\",roles:[{role:\"readWrite\",db:\"test\"}]}) > db.auth(\"test\",\"test\") 有认证 Replica Set要使用keyFile的校验方式，让集群的member之间同步，也就是说，通过keyFile获得__system用户在local上的权限。local存放着Replica Set的配置和同步信息。 MongoDB官方推荐的keyFile的生产方式： openssl rand -base64 756 > /data/key_file chmod 400 /data/key_file mkdir -p /home/docker/mongo/replica_set01/data mkdir -p /home/docker/mongo/replica_set02/data mkdir -p /home/docker/mongo/replica_set03/data # key_file 必须跟数据文件在一个目录，否则容器启动报错，如：[main] error opening file: /data/key_file: Permission denied \\cp -f /data/key_file /home/docker/mongo/replica_set01/data/ \\cp -f /data/key_file /home/docker/mongo/replica_set02/data/ \\cp -f /data/key_file /home/docker/mongo/replica_set03/data/ docker stop mongo_replica_set01 && docker rm mongo_replica_set01 docker run -d --name mongo_replica_set01 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set01/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30020 --replSet mongoreplset --auth --keyFile=/data/db/key_file docker stop mongo_replica_set02 && docker rm mongo_replica_set02 docker run -d --name mongo_replica_set02 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set02/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30021 --replSet mongoreplset --auth --keyFile=/data/db/key_file docker stop mongo_replica_set03 && docker rm mongo_replica_set03 docker run -d --name mongo_replica_set03 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set03/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30022 --replSet mongoreplset --auth --keyFile=/data/db/key_file 初始化 replica set： docker exec -it mongo_replica_set01 mongo admin --port 30020 --host 10.68.0.7 -u root -p 123456 > rs.initiate() > rs.add('10.68.0.7:30021') > rs.add('10.68.0.7:30022') > rs.status() > use test > db.test.insert({msg: \"this message is from replica_set01\", ts: new Date()}) > db.test.find(); > exit docker exec -it mongo_replica_set02 mongo --port 30021 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit docker exec -it mongo_replica_set03 mongo --port 30022 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit 分片集群 后续继续深入研究。 参考资料 MongoDB的Replica Set以及Auth的配置 Enforce Keyfile Access Control in a Replica Set Enforce Keyfile Access Control in a Replica Set without Downtime Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-27 17:00:37 "},"hub_docker/database/elasticsearch.html":{"url":"hub_docker/database/elasticsearch.html","title":"elasticsearch","keywords":"","body":"elasticsearch 官方镜像 docker.elastic.co 启动命令 docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.4 /sbin/sysctl -w vm.max_map_count=262144 docker stop elasticsearch && docker rm elasticsearch docker run -d --name elasticsearch --restart=always -p 9200:9200 -p 9300:9300 \\ --ulimit nofile=65536:65536 --ulimit memlock=-1:-1 \\ -e \"bootstrap.memory_lock=true\" \\ -e \"discovery.type=single-node\" \\ -e \"ES_JAVA_OPTS=-Xms8g -Xmx8g\" \\ docker.elastic.co/elasticsearch/elasticsearch:6.5.4 # 检查es健康状态： curl http://127.0.0.1:9200/_cat/health 参考资料 Install Elasticsearch with Docker Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-26 13:18:05 "},"hub_docker/big_data/redash.html":{"url":"hub_docker/big_data/redash.html","title":"redash","keywords":"","body":"redash Supported Data Sources 官方镜像 Hub官方 开源项目 官方 getredash/redash 容器化部署 非官方 repertory/docker-redash 参考资料 redash docker 运行 Using a Hive Database Visualize your massive data with Impala and Redash Impala and Hive connection issues install needed dependencies to use Hive in Docker image Redash 备份、还原、升级 CDH开启Kerberos，Java连接impala MongoDB Setup Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-25 12:04:27 "},"hub_docker/big_data/metabase.html":{"url":"hub_docker/big_data/metabase.html","title":"metabase","keywords":"","body":"metabase 官方 https://www.metabase.com/start/docker.html 启动命令 docker run -d -p 3000:3000 --name metabase metabase/metabase Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-30 17:17:24 "},"command/container.html":{"url":"command/container.html","title":"容器管理","keywords":"","body":"容器管理 常用命令 # 查看容器 IP 地址 docker inspect --format '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 容器ID/NAME # 查看 volume docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect VOLUME_NAME # docker exec 以 root 身份登录容器 docker exec -it --user root /bin/bash Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-31 16:20:26 "},"command/image.html":{"url":"command/image.html","title":"镜像管理","keywords":"","body":"镜像管理 常用命令 # 查找所有包含 registry.eyd.com:5000 关键字的镜像 docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 删除所有包含 registry.eyd.com:5000 关键字的镜像 docker rmi $(docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}') docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 列举悬空镜像（TAG=none） docker images -f dangling=true # 删除全部悬空镜像 docker image prune # 删除所有未被使用的镜像 docker image prune -a Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-11-05 14:36:54 "},"compose/install.html":{"url":"compose/install.html","title":"安装使用","keywords":"","body":"安装使用 官方网站 Centos7 curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-compose --version # 安装命令自动补齐 yum -y install bash-completion curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose su - Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-10 15:31:19 "},"compose/file_reference.html":{"url":"compose/file_reference.html","title":"编排文件参考","keywords":"","body":"编排文件参考 官方参考 volumes docker-compose里两种设置方式都是可以持久化的： 绝对路径的 ghost: image: ghost volumes: - ./ghost/config.js:/var/lib/ghost/config.js 卷标的 services: mysql: image: mysql container_name: mysql volumes: - mysql:/var/lib/mysql ... volumes: mysql: 第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道数据存在本地什么位置，下面说明如何查看docker的卷标： # 查看所有卷标 docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect redissentinel_redis_node1_data 参考资料 Docker之Compose服务编排 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-21 10:22:49 "},"tip.html":{"url":"tip.html","title":"小技巧","keywords":"","body":"小技巧 在一个已经 \"exit” 的docker容器中修改配置文件 此法验证失败，待进一步寻求方法。 有时候可能需要修改运行在docker容器中的nginx的配置文件，或者其他一些已经运行和启动很久的容器中的配置文件。但是在这个过程可能稍有不慎，配置文件中，比如少了个分号，直接导致容器运行不起来，每次启动到一半就报错退出，使容器不可用。有没有一种办法可以在一个已经 \"exit”的docker容器中修改配置文件呢？答案还是有的。 运行命令 docker inspect [CONTAINER ID] 复制 MergedDir 中的路径，切换到对应的目录下 可以惊奇地发现前者的目录文件和直接进入容器中的可以看到的目录文件是一样的，这样我们就可以在前者中，也就是在容器已经 \"exit\" 的情况下，修改容器中的配置文件，比如 nginx 的话，就进入到 etc/nginx/ 下边去修改那个“忘记添加分号的” nginx.conf。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-08 09:20:14 "}}