{"./":{"url":"./","title":"我的 docker 学习手册","keywords":"","body":"简介 docker run -it --rm hub.wonhigh.cn/basic/alpine-java:8_jdk date docker run -it --rm hub.wonhigh.cn/basic/alpine-java:7_jdk date docker run -it --rm anapsix/alpine-java:7_jdk bash # 在容器内取容器ID cat /proc/self/cgroup | grep pids | awk -F '/' '{print $NF}' | cut -c1-12 # 如何从容器内部获取容器ID cat /proc/self/mountinfo 或 cat /proc/self/mounts 或 cat /proc/self/cgroup https://github.com/bcicen/ctop Docker 官网 what-container 容器如“衣服”，而虚拟机却是“房子” Docker | 第五章：构建自定义镜像 10张图带你深入理解Docker容器和镜像 镜像加速技巧： quay.io 的可以用 ustc 的 quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0 docker stack Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-22 23:47:13 "},"install/Centos7.html":{"url":"install/Centos7.html","title":"Centos7 安装 docker","keywords":"","body":"Centos7 安装 docker 在一台干净的机器上安装 docker，使用阿里云的仓库，加快安装的过程。 # step 1: 安装必要的一些系统工具 yum install -y yum-utils device-mapper-persistent-data lvm2 # Step 2: 添加软件源信息 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # Step 3: 更新并安装 Docker-CE yum makecache fast # 安装指定版本的Docker-CE: yum list docker-ce.x86_64 --showduplicates | sort -r yum -y install docker-ce-18.03.0.ce-1.el7.centos docker --version # Step 4: 重定义对docker0网桥，设置镜像加速器和信任仓库 mkdir -p /etc/docker tee /etc/docker/daemon.json > /etc/hosts # Step 7: 测试镜像拉取 docker pull hub.wonhigh.cn/retail/retail-gms-web:1.7.0-SNAPSHOT # 注意： # 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。 # vim /etc/yum.repos.d/docker-ee.repo # 将[docker-ce-test]下方的enabled=0修改为enabled=1 # # 安装指定版本的Docker-CE: # Step 1: 查找Docker-CE的版本: # yum list docker-ce.x86_64 --showduplicates | sort -r # Loading mirror speeds from cached hostfile # Loaded plugins: branch, fastestmirror, langpacks # docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable # docker-ce.x86_64 17.03.1.ce-1.el7.centos @docker-ce-stable # docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable # Available Packages # Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos) # sudo yum -y install docker-ce-[VERSION] 安装 docker-compose # 安装 docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose # 安装 docker-compose Command-line completion yum -y install bash-completion curl -L https://raw.githubusercontent.com/docker/compose/1.23.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-07 10:41:34 "},"hub_docker/system_tools/GateOne.html":{"url":"hub_docker/system_tools/GateOne.html","title":"GateOne","keywords":"","body":"GateOne 简介 GateOne 是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器，非常高大尚，它有以下特点： 基于现代的 HTML5 技术，无需任何浏览器插件。 支持多个 SSH 进程。 可以嵌入到其他任意应用程序中。 支持使用 JavaScript，Python 甚至纯 CSS 编写的插件。 支持 SSH 进程副本，打开多个进程而无需重复输入密码。 支持各种服务器端的日志功能，支持 Keberos-based 单点登录甚至活动目录。 支持操作日志记录，具有操作记录回放功能。 综上所述，GateOne 可以作为一种堡垒机的开源解决方案。 官方镜像 liftoff/gateone 启动命令 docker run -d --name gateone -h gateone -p 12222:8000 --restart=always \\ -e TZ=Asia/Shanghai \\ liftoff/gateone gateone 服务使用 访问：https://172.20.32.36:12222/ 即可。 快捷访问：https://172.20.32.36:12222/?ssh=ssh://root@172.20.32.47 即可。 参考资料 开源web终端ssh解决方案-gateone简介 一款非常好用的Web端SSH工具：GateOne安装教程 GateOne —— 高效的WebSSH工具 扩展阅读 GateOne配置API认证、SSH自动登录、用户免密登录及Web应用嵌入 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 12:17:22 "},"hub_docker/system_tools/WebSSH2.html":{"url":"hub_docker/system_tools/WebSSH2.html","title":"WebSSH2","keywords":"","body":"WebSSH2 简介 与 GateOne 类似，也是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器。 特点是更轻量，可以方便地抓取服务器操作产生的日志。 更多内容请参考： webssh2官网 官方镜像 psharkey/webssh2 启动命令 docker run -d --name webssh2 -p 2222:2222 --restart=always \\ psharkey/webssh2 服务使用 访问：http://172.20.32.36:2222/ssh/host/172.20.32.47 即可。 参考资料 一个可以在浏览器上运行的SSH客户端：WebSSH2安装教程 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-10-13 13:28:03 "},"hub_docker/system_tools/shadowsocks.html":{"url":"hub_docker/system_tools/shadowsocks.html","title":"shadowsocks","keywords":"","body":"shadowsocks shadowsocks-privoxy shadowsocks client for socks5 proxy privoxy for http proxy 我的镜像 bjddd192/shadowsocks-privoxy 启动命令 docker stop shadowsocks-privoxy && docker rm shadowsocks-privoxy docker run -d --name shadowsocks-privoxy -p 8118:8118 --restart=always \\ -e SERVER_ADDR=x.x.x.x \\ -e SERVER_PORT=8087 \\ -e PASSWORD=dockerMan \\ bjddd192/shadowsocks-privoxy:2.9.1 验证代理 export all_proxy=http://127.0.0.1:8118 export ftp_proxy=http://127.0.0.1:8118 export http_proxy=http://127.0.0.1:8118 export https_proxy=http://127.0.0.1:8118 export no_proxy=localhost,172.17.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16 curl -I www.google.com # 翻墙下载测试 wget -P /tmp --no-check-certificate https://s3.amazonaws.com/railsinstaller/Windows/railsinstaller-3.3.0.exe 取消使用代理 while read var; do unset $var; done 参考资料 bluebu/shadowsocks-privoxy shadowsocks-libev Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-07 18:24:32 "},"hub_docker/system_tools/dnsmasq.html":{"url":"hub_docker/system_tools/dnsmasq.html","title":"dnsmasq","keywords":"","body":"dnsmasq 简介 GateOne 是一款使用 HTML5 技术编写的网页版 SSH 终端模拟器，非常高大尚，它有以下特点： 基于现代的 HTML5 技术，无需任何浏览器插件。 支持多个 SSH 进程。 可以嵌入到其他任意应用程序中。 支持使用 JavaScript，Python 甚至纯 CSS 编写的插件。 支持 SSH 进程副本，打开多个进程而无需重复输入密码。 支持各种服务器端的日志功能，支持 Keberos-based 单点登录甚至活动目录。 支持操作日志记录，具有操作记录回放功能。 综上所述，GateOne 可以作为一种堡垒机的开源解决方案。 官方镜像 andyshinn/dnsmasq 我的镜像 启动命令 mkdir -p /data/docker_volumn/dnsmasq tee > /data/docker_volumn/dnsmasq/resolv.dnsmasq /data/docker_volumn/dnsmasq/dnsmasqhosts /data/docker_volumn/dnsmasq/dnsmasq.conf 防火墙设置 如服务器启用了防火墙，需要增加规则： firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 -p tcp --dport 53 -j ACCEPT firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 -p udp --dport 53 -j ACCEPT firewall-cmd --reload 客户端使用 linux 找到 /etc/sysconfig/network-scripts/ 下的物理网卡文件增加或修改 DNS 配置，然后重启网络服务，如下： vi /etc/sysconfig/network-scripts/ifcfg-eth0 NAME=\"eth0\" HWADDR=\"00:50:56:87:58:06\" ONBOOT=yes NETBOOT=yes UUID=\"44721538-1fbe-4d73-98dc-bd6dafff03c6\" IPV6INIT=yes BOOTPROTO=static TYPE=Ethernet IPADDR=10.234.6.83 NETMASK=255.255.255.0 GATEWAY=10.234.6.1 DNS1=10.0.43.27 # 重启网络服务 systemctl restart network windows 直接到网络中添加此 dns 服务，注意应该放置到最前面。 参考资料 Docker下搭建DNS服务器dnsmasq Dnsmasq安装与配置 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-04-10 23:47:20 "},"hub_docker/system_tools/sftp.html":{"url":"hub_docker/system_tools/sftp.html","title":"sftp","keywords":"","body":"sftp 官方镜像 atmoz/sftp github atmoz/sftp 启动命令 echo -n \"scm2Ftp\" | docker run -i --rm atmoz/makepasswd:latest --crypt-md5 --clearfrom=- # 获得加密的密码：scm2Ftp $1$pHK5AlwG$phlh2vFjyawxmc/YNwUvs1 # 生成用户密钥文件 mkdir -p /data/docker_volumn/sftp/config echo 'scm:$1$pHK5AlwG$phlh2vFjyawxmc/YNwUvs1:e:1001:1001' > /data/docker_volumn/sftp/config/users.conf # 创建数据目录 mkdir -p /data/docker_volumn/sftp/data chown -R 1001:1001 /data/docker_volumn/sftp/data docker stop sftp && docker rm -f sftp docker run --name sftp -d -p 11022:22 --restart=always \\ -v /data/docker_volumn/sftp/data:/home/scm/sftp/ \\ -v /data/docker_volumn/sftp/config/users.conf:/etc/sftp/users.conf:ro \\ atmoz/sftp:latest # 验证 sftp -P 11022 scm@127.0.0.1:/sftp 客户端选择 FileZilla 支持全平台。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-25 11:47:09 "},"hub_docker/system_tools/ftp.html":{"url":"hub_docker/system_tools/ftp.html","title":"ftp","keywords":"","body":"ftp 官方镜像 bogem/ftp github bogem/dockerfiles 启动命令 docker stop ftp && docker rm -f ftp docker run --name ftp -d -p 20:20 -p 21:21 -p 47400-47470:47400-47470 --restart=always \\ -e FTP_USER=scm \\ -e FTP_PASS=scm2Ftp \\ -e PASV_ADDRESS=10.0.43.24 \\ -v /data/docker_volumn/ftp/data:/home/vsftpd \\ bogem/ftp:latest # 浏览器验证 ftp://scm:scm2Ftp@10.0.43.24/ 客户端选择 FileZilla 支持全平台。 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-25 11:47:14 "},"hub_docker/system_tools/filezilla.html":{"url":"hub_docker/system_tools/filezilla.html","title":"filezilla","keywords":"","body":"filezilla FileZilla 是一个跨平台的图形化 FTP，SFTP 和 FTPS 文件管理工具，具有强大的功能。 官方镜像 jlesage/filezilla 官网 filezilla Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-25 13:50:31 "},"hub_docker/system_tools/fastdfs.html":{"url":"hub_docker/system_tools/fastdfs.html","title":"fastdfs","keywords":"","body":"fastdfs FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。 FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。 官方镜像 qbanxiaoli/fastdfs github qbanxiaoli/fastdfs happyfish100/fastdfs 启动命令 docker stop fastdfs && docker rm -f fastdfs docker run --name fastdfs -d --privileged=true --net=host --restart=always \\ -e IP=123.207.85.155 \\ -v /data/docker_volumn/fastdfs:/var/local/fdfs \\ qbanxiaoli/fastdfs # 验证 docker exec -it fastdfs bash echo \"Hello FastDFS!\" > index.html fdfs_test /etc/fdfs/client.conf upload index.html # 获取返回的文件地址，并在浏览器访问，如： http://10.0.43.38:8080/group1/M00/00/00/CgArJlzOj7uAEBL_AAAAD1NdKGM56.html 参考资料 FastDFS 分布式文件系统 FastDFS的介绍 Nginx和FastDfs完整配置过程 FastDFS集群部署 FastDFS Java Client Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-05-05 15:52:05 "},"hub_docker/ops_tools/rundeck.html":{"url":"hub_docker/ops_tools/rundeck.html","title":"rundeck","keywords":"","body":"rundeck 官方网站 github 版本变更信息 官方文档 官方安装教程 官方镜像 Hub官方 安装步骤 准备数据库 create database db_rundeck; grant all privileges on db_rundeck.* to 'usr_rundeck'@'%' identified by 'scm_rundeck'; flush privileges; 编排文件(非持久化启动) version: '2.1' services: rundeck: image: rundeck/rundeck:3.0.20 container_name: rundeck restart: always ports: - \"4440:4440\" environment: - RUNDECK_DATABASE_DRIVER=com.mysql.jdbc.Driver - RUNDECK_GRAILS_URL=http://10.243.2.164:4440 - RUNDECK_DATABASE_URL=jdbc:mysql://10.243.2.164:3306/db_rundeck?autoReconnect=true - RUNDECK_DATABASE_USERNAME=usr_rundeck - RUNDECK_DATABASE_PASSWORD=scm_rundeck - RUNDECK_JAAS_MODULES_0=ReloadablePropertyFileLoginModule - RUNDECK_JAAS_MODULES_1=PropertyFileLoginModule volumes: - /etc/localtime:/etc/localtime network_mode: bridge user: root 初始化配置文件夹 # 创建 rundeck 容器 docker-compose up -d rundeck # 从容器中复制需持久化的文件夹 mkdir -p /data/docker_volumn/rundeck/server docker cp rundeck:home/rundeck/server/data /data/docker_volumn/rundeck/server/ docker cp rundeck:/home/rundeck/.ssh /data/docker_volumn/rundeck/server/ docker cp rundeck:home/rundeck/server/config /data/docker_volumn/rundeck/server/ docker cp rundeck:/home/rundeck/etc /data/docker_volumn/rundeck/server/ mv /data/docker_volumn/rundeck/server/.ssh /data/docker_volumn/rundeck/server/ssh # 销毁 rundeck 容器 docker-compose stop rundeck docker-compose rm -f rundeck 编排文件(持久化启动) version: '2.1' services: rundeck: image: rundeck/rundeck:3.0.20 container_name: rundeck restart: always ports: - \"4440:4440\" environment: - RUNDECK_DATABASE_DRIVER=com.mysql.jdbc.Driver - RUNDECK_GRAILS_URL=http://10.243.2.164:4440 - RUNDECK_DATABASE_URL=jdbc:mysql://10.243.2.164:3306/db_rundeck?autoReconnect=true - RUNDECK_DATABASE_USERNAME=usr_rundeck - RUNDECK_DATABASE_PASSWORD=scm_rundeck - RUNDECK_JAAS_MODULES_0=ReloadablePropertyFileLoginModule - RUNDECK_JAAS_MODULES_1=PropertyFileLoginModule volumes: - /etc/localtime:/etc/localtime - /data/docker_volumn/rundeck/server/data:/home/rundeck/server/data - /data/docker_volumn/rundeck/server/ssh:/home/rundeck/.ssh - /data/docker_volumn/rundeck/server/config:/home/rundeck/server/config - /data/docker_volumn/rundeck/server/etc:/home/rundeck/etc network_mode: bridge user: root 验证 访问：http://10.243.2.164:4440，初始密码：admin/admin 节点配置 配置文件 容器内文件路径：/home/rundeck/server/data/resources.xml 宿主机文件路径：/data/docker_volumn/rundeck/server/data/resources.xml 设置免密 首先拷贝宿州机器的ssh docker exec -it --env COLUMNS=200 --env LINES=200 rundeck bash ssh-copy-id -i /home/rundeck/.ssh/id_rsa.pub -p 22 root@10.243.2.165 scp -r -P 22 -i /home/rundeck/.ssh/id_rsa 10.243.2.165:/tmp/nothing . 用户管理 加密密码 用户文件位于：/data/docker_volumn/rundeck/server/config/realm.properties docker exec -it rundeck java -jar rundeck.war --encryptpwd Jetty $ java -jar rundeck-3.0.0.war --encryptpwd Jetty Required values are marked with: * Username (Optional, but necessary for Crypt encoding): jsmith 添加用户 编辑 realm.properties 文件，使用如下类似的行将其添加到文件中： admin:admin2Leo,user,admin deployer:scm_uat_ops,user jsmith:MD5:a029d0df84eb5549c641e04a9ef389e5,user 关于用户配置文件修改后需要热加载，请查看官方文档： 验证用户 应该是调整 /data/docker_volumn/rundeck/server/config/jaas-loginmodule.conf 文件配置即可。 目前我使用的是重启容器生效的策略，简单粗暴。 配置普通用户权限 在访问策略中增加 ACL Policy： description: user access projects control context: project: '.*' # all projects for: job: - allow: [read,run,kill] # allow read/write/delete/run/kill of all jobs node: - allow: [read,run] # allow read/run for all nodes by: group: user --- description: user access rundeck control context: application: 'rundeck' for: project: - allow: 'read' # allow view/admin of all projects storage: - allow: 'read' # allow read/create/update/delete for all /keys/* storage content by: group: user 参考资料 rundeck用户权限配置 rundeck权限设置 修改docker -v 挂载的文件遇到的问题 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-04-17 22:27:48 "},"hub_docker/source_code_tools/Gitlab.html":{"url":"hub_docker/source_code_tools/Gitlab.html","title":"Gitlab","keywords":"","body":"Gitlab 官方镜像 Hub官方 启动命令 mkdir -p /data/gitlab/etc mkdir -p /data/gitlab/log mkdir -p /data/gitlab/data docker run \\ --detach \\ --publish 8443:443 \\ --publish 8080:80 \\ --name gitlab \\ --restart unless-stopped \\ --volume /data/gitlab/etc:/etc/gitlab \\ --volume /data/gitlab/log:/var/log/gitlab \\ --volume /data/gitlab/data:/var/opt/gitlab \\ beginor/gitlab-ce:11.3.0-ce.0 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-27 13:54:52 "},"hub_docker/monitor_tools/Pinpoint.html":{"url":"hub_docker/monitor_tools/Pinpoint.html","title":"Pinpoint","keywords":"","body":"Pinpoint Pinpoint 是世界领先的开源应用监控解决方案 - 受到全球数百万用户的信赖。它支持并帮助您一目了然地了解您的应用程序，并允许您构建世界一流的高质量软件。 Pinpoint 是开源在 github 上的一款 APM 监控工具，它是用 Java 编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约 3％ 资源利用率），安装 agent 是无侵入式的，只需要在被测试的 Tomcat 中加上 3 句话，打下探针，就可以监控整套程序了。 官网 Hub官方 容器化安装 git clone https://github.com/naver/pinpoint-docker.git cd pinpoint-docker # 查看 tag 版本 git tag # 切换 tag 版本 git checkout 1.8.0 # 这时候 git 可能会提示你当前处于一个“detached HEAD\" 状态。 # 因为 tag 相当于是一个快照，是不能更改它的代码的。 # 如果要在 tag 代码的基础上做修改，你需要一个分支： git checkout -b branch_name tag_name # 查看当前分支 git branch -a # 检查调整 docker-compose.yaml 文件的网络模式等 # 检查配置 .env 文件参数 docker-compose pull && docker-compose up -d # 调试基础 jdk docker run -it --rm -e AGENT_DEBUG_LEVEL=DEBUG -e COLLECTOR_IP=10.0.43.25 hub.wonhigh.cn/basic/alpine-java:8_jdk_pinpoint_agent bash 仓库比较大，镜像比较多，需要耐心等待。 测试地址： http://10.0.43.25:8079 http://10.0.43.25:8081 参考资料 docker部署pinpoint，监控docker中的Springboot项目 Pinpoint 安装部署 分布式跟踪工具Pinpoint技术入门 Pinpoint 分布式请求跟踪系统的搭建 Dapper，大规模分布式系统的跟踪系统 Pinpoint 安装部署 项目系统监控 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-22 10:46:58 "},"hub_docker/developer_tools/php.html":{"url":"hub_docker/developer_tools/php.html","title":"php","keywords":"","body":"php 官方镜像 Hub官方 测试文件 hello.php PHP 测试 Hello World'; ?> 启动命令 docker stop php-app && docker rm php-app docker run --name php-app -d -p 30028:80 --restart=always \\ -v /home/docker/php:/var/www/html \\ php:7.2-apache 验证 访问 url 如：http://203.195.243.110:30028/hello.php Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-26 23:40:37 "},"hub_docker/developer_tools/jenkins.html":{"url":"hub_docker/developer_tools/jenkins.html","title":"jenkins","keywords":"","body":"jenkins 官方镜像 Hub官方 Hub官方(旧版) 我的镜像 我的镜像 maven settings 文件 /data/docker_volumn/jenkins/settings.xml /var/jenkins_home/maven-repository true false false release deployment ${usr.home}/.ssh/id_dsa --> some_passphrase --> 664 --> 775 --> --> snapshot deployment thirdparty deployment nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public * nexus nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public nexus 启动命令 docker stop jenkins && docker rm jenkins docker run --name jenkins -d -p 29999:8080 -p 5000:50000 --restart=always \\ --memory 2G -u root \\ -v /data/docker_volumn/jenkins:/var/jenkins_home \\ -v /usr/bin/docker:/usr/bin/docker \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\ bjddd192/jenkins:2.165 # 拷贝出 /usr/share/jenkins 方便后续 jenkins 升级 docker cp jenkins:/usr/share/jenkins /data/docker_volumn/jenkins_war # 生成 maven 配置文件 tee > /data/docker_volumn/jenkins/settings.xml /var/jenkins_home/maven-repository true false false release deployment snapshot deployment thirdparty deployment docker-hub scm n7izpoc6N2 scm@ex.com nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public * nexus nexus local private nexus http://192.168.105.88:20020/nexus/content/groups/public nexus EOF docker stop jenkins && docker rm jenkins docker run --name jenkins -d -p 29999:8080 -p 5000:50000 --restart=always \\ --memory 3G -u root \\ -v /data/docker_volumn/jenkins:/var/jenkins_home \\ -v /data/docker_volumn/jenkins_war:/usr/share/jenkins \\ -v /usr/bin/docker:/usr/bin/docker \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \\ -v /data/docker_volumn/jenkins/settings.xml:/usr/local/apache-maven-3.6.0/conf/settings.xml \\ bjddd192/jenkins:2.165 验证 访问 url 如：http://serverIP:29999 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-21 11:24:43 "},"hub_docker/developer_tools/nexus2.html":{"url":"hub_docker/developer_tools/nexus2.html","title":"nexus2","keywords":"","body":"nexus2 官方镜像 Hub官方 启动命令 mkdir /data/docker_volumn/nexus2/conf mkdir /data/docker_volumn/nexus2/data tee > /data/docker_volumn/nexus2/conf/nexus.properties 验证 访问 url 如：http://serverIP:20020/nexus，初始用户名/密码：admin/admin123 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 16:27:26 "},"hub_docker/message_tools/kafka.html":{"url":"hub_docker/message_tools/kafka.html","title":"kafka","keywords":"","body":"kafka kafka 使用背景 在我们大量使用分布式数据库、分布式计算集群的时候，是否会遇到这样的一些问题： 我们想分析下用户行为（pageviews），以便我们设计出更好的广告位 我想对用户的搜索关键词进行统计，分析出当前的流行趋势 有些数据，存储数据库浪费，直接存储硬盘效率又低 这些场景都有一个共同点： 数据是由上游模块产生，使用上游模块的数据计算、统计、分析，这个时候就可以使用消息系统，尤其是分布式消息系统！ kafka 定义 kafka 是一个分布式消息系统，由 linkedin 使用 scala 编写，用作 LinkedIn 的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。具有高水平扩展和高吞吐量。 常用消息组件对比 关键名词 broker：kafka 集群包含一个或者多个服务器，服务器就称作 broker。 producer：负责发布消息到 broker。 consumer：消费者，从 broker 获取消息。 topic：发布到 kafka 集群的消息类别。 partition：每个 topic 划分为多个 partition。 group：每个 partition 分为多个 group。 kafka 教程 Kafka 中文文档 - ApacheCN kafka 中文教程 Apache Kafka 教程 版本演变 一文看懂 kafka 消息格式的演变 kafka 0.8--0.11各个版本特性预览介绍 kafka 各个版本差异汇总 官方镜像 fast-data-dev / kafka-lenses-dev (Lenses Box) wurstmeister/zookeeper wurstmeister/kafka sheepkiller/kafka-manager 编排文件 kafka 1.11 版本： version: '2.1' services: zookeeper: image: wurstmeister/zookeeper:latest container_name: zookeeper restart: always ports: - \"2181:2181\" environment: - TZ=Asia/Shanghai volumes: - /data/docker_volumn/zookeeper/data:/data - /data/docker_volumn/zookeeper/datalog:/datalog network_mode: bridge kafka: image: wurstmeister/kafka:2.11-1.1.1 container_name: kafka restart: always ports: - \"9092:9092\" environment: - KAFKA_ADVERTISED_HOST_NAME=10.0.43.19 - KAFKA_ZOOKEEPER_CONNECT=10.0.43.19:2181 - KAFKA_MESSAGE_MAX_BYTES=2000000 - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true volumes: - /data/docker_volumn/kafka/logs:/kafka - /var/run/docker.sock:/var/run/docker.sock network_mode: bridge kafka-manager: image: sheepkiller/kafka-manager:latest container_name: kafka-manager restart: always ports: - \"9000:9000\" environment: - ZK_HOSTS=10.0.43.19:2181 network_mode: bridge 读写验证 # 创建 topics docker exec -it kafka kafka-topics.sh --create --zookeeper 10.0.43.19:2181 --replication-factor 1 --partitions 1 --topic petrel_notification # 查看所有 topics docker exec -it kafka kafka-topics.sh --list --zookeeper 10.0.43.19:2181 # 查看 petrel_notification topic docker exec -it kafka kafka-topics.sh --list --zookeeper 10.0.43.19:2181 --topic petrel_notification # 列出所有 kafka brokers docker exec -it zookeeper bin/zkCli.sh ls /brokers/ids # 进入 kafka 容器 docker exec -it -e COLUMNS=200 -e LINES=200 kafka bash # 发送消息，输入几条消息后，按^C退出发布 docker exec -it kafka kafka-console-producer.sh --broker-list 10.0.43.19:9092 --topic petrel_notification # 接收消息 docker exec -it kafka kafka-console-consumer.sh --bootstrap-server 10.0.43.19:9092 --topic petrel_notification --from-beginning # 删除 topics # docker exec -it kafka kafka-topics.sh --delete --zookeeper 10.0.43.19:2181 --topic petrel_notification wurstmeister/zookeeper wurstmeister/kafka 参考资料 Kafka初识 kafka 入门：简介、使用场景、设计原理、主要配置及集群搭建 为什么Kafka那么快 使用Docker快速搭建Kafka开发环境 kafka原理及Docker环境部署 kafka主题 Kafka集群管理工具kafka-manager的安装使用 kaka-manager和kafka-offset-monitor的安装和使用 docker kafkaOffsetMonitor 安装与搭建监控 kafka监控工具KafkaOffsetMonitor配置及使用 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-04-15 00:44:36 "},"hub_docker/database/mysql.html":{"url":"hub_docker/database/mysql.html","title":"MySQL","keywords":"","body":"mysql 官方镜像 Hub官方 启动命令 docker run --name mysql -d -p 3309:3306 \\ -e 'MYSQL_ROOT_PASSWORD=blf1#root' \\ -v /home/docker/mysql/data:/var/lib/mysql/ \\ mysql:5.7.24 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 23:31:56 "},"hub_docker/database/Oracle.html":{"url":"hub_docker/database/Oracle.html","title":"Oracle","keywords":"","body":"Oracle Oracle 11g 官方镜像 Hub官方(已失效) 我的镜像 docker-oracle-xe-11g 启动命令 docker run --name oracle -d -p 49161:1521 --restart=always \\ -e ORACLE_ALLOW_REMOTE=true \\ bjddd192/oracle-xe-11g:18.04 # 数据目录持久化未成功，待后面研究 # /data/docker_volumn/oralce/data:/u01/app/oracle/oradata/XE \\ 数据库连接信息: hostname: localhost port: 49161 sid: xe username: system password: oracle jdbc连接信息: jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.0.43.32)(PORT=49161)))(CONNECT_DATA=(SERVER = DEDICATED)(SERVICE_NAME=xe))) Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-19 22:59:11 "},"hub_docker/database/MongoDB.html":{"url":"hub_docker/database/MongoDB.html","title":"MongoDB","keywords":"","body":"MongoDB 官方镜像 Hub官方 启动命令 单节点 docker stop mongo && docker rm mongo docker run -d --name mongo -p 30017:27017 --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/data:/data/db \\ mongo:3.4.18 测试数据： docker exec -it mongo mongo admin --port 27017 -u root -p123456 > use test > db.test.insert({msg: \"this message is from master\", ts: new Date()}) > show dbs 一主一从 优缺点：master-slave 结构，当 master 挂了，slave 不会被选举为 master，所以这种结构只起到了备份数据的作用。 docker stop mongo_master && docker rm mongo_master docker run -d --name mongo_master --net=host --restart=always \\ -v /home/docker/mongo/master/data:/data/db \\ mongo:3.4.18 \\ mongod --port 30018 --master docker stop mongo_slaver && docker rm mongo_slaver docker run -d --name mongo_slaver --net=host --restart=always \\ -v /home/docker/mongo/slaver/data:/data/db \\ mongo:3.4.18 \\ mongod --port 30019 --slave --source 10.68.0.7:30018 测试数据： docker exec -it mongo_master mongo --port 30018 > use test > db.test.insert({msg: \"this message is from master\", ts: new Date()}) > db.test.find(); > show dbs > exit docker exec -it mongo_slaver mongo --port 30019 > use test switched to db test > db.test.insert({msg: \"this message is from slaver\", ts: new Date()}) # slaver 只读，无法写入 WriteResult({ \"writeError\" : { \"code\" : 10107, \"errmsg\" : \"not master\" } }) # 副本节点上不允许读，需要设置副本节点可以读。 > db.test.setSlaveOk(); > db.test.find(); # 查看服务状态 > db.printReplicationInfo(); > exit mongoDB 官方已经不建议使用主从模式了，替代方案是采用副本集的模式。 副本集 无认证 mkdir -p /home/docker/mongo/replica_set01 mkdir -p /home/docker/mongo/replica_set02 mkdir -p /home/docker/mongo/replica_set03 docker stop mongo_replica_set01 && docker rm mongo_replica_set01 docker run -d --name mongo_replica_set01 --net=host --restart=always \\ -v /home/docker/mongo/replica_set01/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30020 --replSet mongoreplset docker stop mongo_replica_set02 && docker rm mongo_replica_set02 docker run -d --name mongo_replica_set02 --net=host --restart=always \\ -v /home/docker/mongo/replica_set02/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30021 --replSet mongoreplset docker stop mongo_replica_set03 && docker rm mongo_replica_set03 docker run -d --name mongo_replica_set03 --net=host --restart=always \\ -v /home/docker/mongo/replica_set03/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30022 --replSet mongoreplset 初始化 replica set： docker exec -it mongo_replica_set01 mongo --port 30020 --host 10.68.0.7 > rs.initiate() > rs.add('10.68.0.7:30021') > rs.add('10.68.0.7:30022') > rs.status() > use test > db.test.insert({msg: \"this message is from replica_set01\", ts: new Date()}) > db.test.find(); > exit docker exec -it mongo_replica_set02 mongo --port 30021 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit docker exec -it mongo_replica_set03 mongo --port 30022 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit 设置账号： docker exec -it mongo_replica_set01 mongo --port 30020 --host 10.68.0.7 > use admin > db.createUser({user:\"root\",pwd:\"root\",roles:[{role:\"root\",db:\"admin\"}]}) > db.createUser({user:\"admin\",pwd:\"admin\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]}) > use test > db.createUser({user:\"test\",pwd:\"test\",roles:[{role:\"readWrite\",db:\"test\"}]}) > db.auth(\"test\",\"test\") 有认证 Replica Set要使用keyFile的校验方式，让集群的member之间同步，也就是说，通过keyFile获得__system用户在local上的权限。local存放着Replica Set的配置和同步信息。 MongoDB官方推荐的keyFile的生产方式： openssl rand -base64 756 > /data/key_file chmod 400 /data/key_file mkdir -p /home/docker/mongo/replica_set01/data mkdir -p /home/docker/mongo/replica_set02/data mkdir -p /home/docker/mongo/replica_set03/data # key_file 必须跟数据文件在一个目录，否则容器启动报错，如：[main] error opening file: /data/key_file: Permission denied \\cp -f /data/key_file /home/docker/mongo/replica_set01/data/ \\cp -f /data/key_file /home/docker/mongo/replica_set02/data/ \\cp -f /data/key_file /home/docker/mongo/replica_set03/data/ docker stop mongo_replica_set01 && docker rm mongo_replica_set01 docker run -d --name mongo_replica_set01 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set01/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30020 --replSet mongoreplset --auth --keyFile=/data/db/key_file docker stop mongo_replica_set02 && docker rm mongo_replica_set02 docker run -d --name mongo_replica_set02 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set02/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30021 --replSet mongoreplset --auth --keyFile=/data/db/key_file docker stop mongo_replica_set03 && docker rm mongo_replica_set03 docker run -d --name mongo_replica_set03 --net=host --restart=always \\ -e MONGO_INITDB_ROOT_USERNAME=root \\ -e MONGO_INITDB_ROOT_PASSWORD=123456 \\ -v /home/docker/mongo/replica_set03/data:/data/db \\ mongo:3.4.18 \\ mongod --bind_ip 10.68.0.7 --port 30022 --replSet mongoreplset --auth --keyFile=/data/db/key_file 初始化 replica set： docker exec -it mongo_replica_set01 mongo admin --port 30020 --host 10.68.0.7 -u root -p 123456 > rs.initiate() > rs.add('10.68.0.7:30021') > rs.add('10.68.0.7:30022') > rs.status() > use test > db.test.insert({msg: \"this message is from replica_set01\", ts: new Date()}) > db.test.find(); > exit docker exec -it mongo_replica_set02 mongo --port 30021 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit docker exec -it mongo_replica_set03 mongo --port 30022 --host 10.68.0.7 > db.getMongo().setSlaveOk(); > db.test.find(); > exit 分片集群 后续继续深入研究。 参考资料 MongoDB的Replica Set以及Auth的配置 Enforce Keyfile Access Control in a Replica Set Enforce Keyfile Access Control in a Replica Set without Downtime Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-27 17:00:37 "},"hub_docker/database/elasticsearch.html":{"url":"hub_docker/database/elasticsearch.html","title":"elasticsearch","keywords":"","body":"elasticsearch 官方镜像 docker.elastic.co 启动命令 docker pull docker.elastic.co/elasticsearch/elasticsearch:6.5.4 /sbin/sysctl -w vm.max_map_count=262144 docker stop elasticsearch && docker rm elasticsearch docker run -d --name elasticsearch --restart=always -p 9200:9200 -p 9300:9300 \\ --ulimit nofile=65536:65536 --ulimit memlock=-1:-1 \\ -e \"bootstrap.memory_lock=true\" \\ -e \"discovery.type=single-node\" \\ -e \"ES_JAVA_OPTS=-Xms8g -Xmx8g\" \\ docker.elastic.co/elasticsearch/elasticsearch:6.5.4 # 检查es健康状态： curl http://127.0.0.1:9200/_cat/health 参考资料 Install Elasticsearch with Docker elasticsearch 快速开始 Elasticsearch基本概念及核心配置文件详解 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-14 10:50:52 "},"hub_docker/big_data/redash.html":{"url":"hub_docker/big_data/redash.html","title":"redash","keywords":"","body":"redash Supported Data Sources 官方镜像 Hub官方 开源项目 官方 getredash/redash 容器化部署 Environment Variables Settings 有关支持，帮助和问题 有关功能请求和想法 非官方 repertory/docker-redash 帮助系列文档 以Redash为资料视觉化方案之选择与实践系列 问题处理 Too Many Requests 调整 REDASH_THROTTLE_LOGIN_PATTERN 参数可以控制资源保护策略。 [Sharing is currently not supported for dashboards containing queries with parameters.] 后续继续跟进：ShareDashboardDialog.jsx 参考资料 redash docker 运行 Using a Hive Database Visualize your massive data with Impala and Redash Impala and Hive connection issues install needed dependencies to use Hive in Docker image Redash 备份、还原、升级 CDH开启Kerberos，Java连接impala MongoDB Setup Redash 使用 Python Query Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-05-30 16:50:19 "},"hub_docker/big_data/metabase.html":{"url":"hub_docker/big_data/metabase.html","title":"metabase","keywords":"","body":"metabase 官方 https://www.metabase.com/start/docker.html 启动命令 docker run -d -p 3000:3000 --name metabase metabase/metabase Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-30 17:17:24 "},"hub_docker/big_data/zookeeper.html":{"url":"hub_docker/big_data/zookeeper.html","title":"zookeeper","keywords":"","body":"zookeeper 可视化工具 DeemOpen/zkui zhitom/zkweb zookeeper可视化管理工具node-zk-browser安装 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-03-25 15:40:49 "},"command/container.html":{"url":"command/container.html","title":"容器管理","keywords":"","body":"容器管理 常用命令 # 查看容器 IP 地址 docker inspect --format '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 容器ID/NAME # 查看 volume docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect VOLUME_NAME # docker exec 以 root 身份登录容器 docker exec -it --user root /bin/bash # 显示容器的实时流资源使用统计信息 docker stats # 格式化显示所有容器的 CPU、内存信息 docker stats -a --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\" # 只拉取一次结果 docker stats -a --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\" --no-stream # 解决 docker 终端宽度、高度显示不正确 docker exec -it --env COLUMNS=`tput cols` --env LINES=`tput lines` your_container_name /bin/bash 参考资料 Docker 1.13最实用命令行：终于可以愉快地打扫房间了 docker stats命令 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-04-14 23:40:28 "},"command/image.html":{"url":"command/image.html","title":"镜像管理","keywords":"","body":"镜像管理 常用命令 # 查找所有包含 registry.eyd.com:5000 关键字的镜像 docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 删除所有包含 registry.eyd.com:5000 关键字的镜像 docker rmi $(docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}') docker images | grep registry.eyd.com:5000 | awk '{print $1\":\"$2}' # 列举悬空镜像（TAG=none） docker images -f dangling=true # 删除全部悬空镜像 docker image prune # 删除所有未被使用的镜像 docker image prune -a # 查看 Docker 整体磁盘使用率的概况，包括镜像、容器和（本地）volume docker system df # 删除当前没有被使用的一切项目，它按照一种正确的序列进行清理，所以会达到最大化的输出结果。 # 首先删除没有被使用的容器，然后是volume和网络，最后是挂起的镜像。 docker system prune # 连同未使用的镜像一并清理 docker system prune -a # 强制清理所有无用对象 docker system prune --volumes -a -f 参考资料 Docker 1.13最实用命令行：终于可以愉快地打扫房间了 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-04-05 00:34:47 "},"compose/install.html":{"url":"compose/install.html","title":"安装使用","keywords":"","body":"安装使用 官方网站 Centos7 curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-compose --version # 安装命令自动补齐 yum -y install bash-completion curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose su - Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-10 15:31:19 "},"compose/file_reference.html":{"url":"compose/file_reference.html","title":"编排文件参考","keywords":"","body":"编排文件参考 官方参考 volumes docker-compose里两种设置方式都是可以持久化的： 绝对路径的 ghost: image: ghost volumes: - ./ghost/config.js:/var/lib/ghost/config.js 卷标的 services: mysql: image: mysql container_name: mysql volumes: - mysql:/var/lib/mysql ... volumes: mysql: 第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道数据存在本地什么位置，下面说明如何查看docker的卷标： # 查看所有卷标 docker volume ls # 查看具体的 volume 对应的真实地址 docker volume inspect redissentinel_redis_node1_data 参考资料 Docker之Compose服务编排 Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-01-21 10:22:49 "},"tip.html":{"url":"tip.html","title":"小技巧","keywords":"","body":"小技巧 在一个已经 \"exit” 的docker容器中修改配置文件 此法验证失败，待进一步寻求方法。 有时候可能需要修改运行在docker容器中的nginx的配置文件，或者其他一些已经运行和启动很久的容器中的配置文件。但是在这个过程可能稍有不慎，配置文件中，比如少了个分号，直接导致容器运行不起来，每次启动到一半就报错退出，使容器不可用。有没有一种办法可以在一个已经 \"exit”的docker容器中修改配置文件呢？答案还是有的。 运行命令 docker inspect [CONTAINER ID] 复制 MergedDir 中的路径，切换到对应的目录下 可以惊奇地发现前者的目录文件和直接进入容器中的可以看到的目录文件是一样的，这样我们就可以在前者中，也就是在容器已经 \"exit\" 的情况下，修改容器中的配置文件，比如 nginx 的话，就进入到 etc/nginx/ 下边去修改那个“忘记添加分号的” nginx.conf。 修改docker -v 挂载的文件遇到的问题 在启动docker容器时，为了保证一些基础配置与宿主机保持同步，通常需要将这些配置文件挂载进 docker容器，例如/etc/resolv.conf//etc/hosts//etc/localtime等。 当这些配置变化时，我们通常会修改这些文件。但是此时遇到了一个问题： 当在宿主机上修改这些文件后，docker容器内查看时，这些文件并未发生对应的修改。 然后通过查阅相关资料，发现该问题是由docker -v挂载文件和某些编辑器存储文件的行为共同导致 的。 docker 挂载文件时，并不是挂载了某个文件的路径，而是实打实的挂载了对应的文件，即挂载了某 个指定的inode文件。 某些编辑器(vi)在编辑保存文件时，采用了备份、替换的策略，即编辑过程中，将变更写入新文件， 保存时，再将备份文件替换原文件，此时会导致文件的inode发生变化。 原inode对应的文件其实并没有发生修改。 因此，我们从宿主机上修改这些文件时，应该采用echo重定向等操作，避免文件的inode发生变化。 docker容器中如何获取宿主机IP，连接宿主机的某个服务 1.通过环境变量传入docker run --env HOST_IP=192.168.0.160，通过环境变量 $HOST_IP 获取 例如：docker run --rm -it -e HOST_IP=hostname -i bjddd192/nginx:1.10.1 bash 2.运行docker时绑定hostdocker run --network host，通过ip route获取 参考资料 理解 inode Copyright © Mars丶小石头 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-05-16 17:32:26 "}}